package com.borch {	import com.greensock.TweenMax;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.media.SoundTransform;	public class StoryManager extends EntryManager {		private static var _instance:StoryManager;		private var changing:Boolean = true;		private var playThumbUp:Boolean = true;		private var mouseDownOnStageLoc:Number;		private var _activeStory:Story;		public function StoryManager (entryXML:XML) {			_instance = this;			super (entryXML);			(stage) ? init ():addEventListener (Event.ADDED_TO_STAGE, init, false, 0, true);		}		private function init (e:Event = null):void {			removeEventListener (Event.ADDED_TO_STAGE, init);			var Buttons:Array = Util.childArray (Controls);			for each (var Btn:* in Buttons) {				Util.initBtn (Btn);				if (Btn == Controls.TextShowBtn) Controls.TextShowBtn.gotoAndStop (2 - int (CBRXML.the().showStoryText));				if (Btn == Controls.AudioBtn) Controls.AudioBtn.gotoAndStop (2 - Math.ceil (CBRXML.the().playerVolume));				if (Btn == Controls.AutoplayBtn) Controls.AutoplayBtn.gotoAndStop (2 - int (CBRXML.the().autoPlay));				Btn.addEventListener (MouseEvent.CLICK, buttonClick, false, 0, true);			}			Controls.PlayThumb.addEventListener (MouseEvent.MOUSE_DOWN, onPlayThumbDown, false, 0, true);			var PlaySlider:OpenSlider = new OpenSlider (Controls.PlayThumb, Controls.PlayBar);			PlaySlider.addEventListener (Event.CHANGE, playThumbSlide, false, 0, true);			addEventListener ('storyAtEnd', storyAtEnd, false, 0, true);			addEventListener ('stopPlay', stopPlay, false, 0, true);//			addEventListener(Event.REMOVED_FROM_STAGE, cleanUp);//			stage.addEventListener (MouseEvent.MOUSE_DOWN, mouseDownOnStage, false, 0, true);//			stage.addEventListener (MouseEvent.MOUSE_UP, mouseUpOnStage, false, 0, true);			addChild (new Backdrop (this, 0xFFFFFF, .7));			getNewStory (0);		}		private function getNewStory (dir:int = 1):XML {			if (_activeStory) _activeStory.stop()			changing = true;			if (dir){				var newStoryIndex:int = int(_entryXML.num) + dir;				if ((newStoryIndex < 0) || (newStoryIndex > CBRXML.the().lastStoryNum)) return null;				_entryXML = XML (CBRXML.the().xml.groups.*.story.(num == newStoryIndex));			}			Controls.LastStory.visible = (_entryXML.num > 1);			Controls.NextStory.visible = (_entryXML.num < CBRXML.the().lastStoryNum);			Main.instance.switchGroups (_entryXML[0].group);			loadStory (_entryXML.URL);		}		private function loadStory (url:String):void {			if (_activeStory) _activeStory.dispatchEvent(new Event('stopPlay', true, true));			var preloadedStory:Story = Main.instance.getFromSWFArchive (url);			if (preloadedStory) {				addChild (preloadedStory);				activateNewStory (preloadedStory);			} else {				addChild (new Story (url));			}		}		public function activateNewStory (newStory:Story):void {//			REMOVE AND ARCHIVE OLD STORY			if (_activeStory) {				var _oldStory:Story = _activeStory;				_oldStory.addEventListener (MouseEvent.CLICK, buttonClick);				_oldStory.filters = [];				Main.instance.putInSWFArchive (_oldStory);				TweenMax.to (_oldStory, 1, { x: +600, autoAlpha:0, onComplete:function () {removeChild (_oldStory)} });			}//			ADD NEW STORY AND SETUP			_activeStory = newStory;			_activeStory.y = 90;			_activeStory.x = 610;			_activeStory.setTextVisibility (CBRXML.the ().showStoryText);			TweenMax.fromTo (_activeStory, 1, {alpha:0}, { x:60, autoAlpha:1, onComplete:prepStory });			TweenMax.to (Controls, .3, {autoAlpha:0});			TweenMax.to (Controls, .3, {autoAlpha:1, delay:.7 });			Title.text = _entryXML.title;		}		private function prepStory ():void {			TweenMax.to (_activeStory, .5, {dropShadowFilter:{color:0, alpha:1, blurX:8, blurY:8, distance:2 }});			_activeStory.soundTransform = new SoundTransform (CBRXML.the().playerVolume);			Controls.PlayThumb.x = Controls.PlayBar.x;			Controls.PlayBtn.gotoAndStop (2);			_activeStory.dispatchEvent(new Event ('startPlay', true, true));			_activeStory.addEventListener (MouseEvent.CLICK, buttonClick, false, 0, true);			changing = false;		}		private function storyAtEnd (e:Event = null):void {			Controls.PlayBtn.gotoAndStop (1);			if (CBRXML.the().autoPlay) TweenMax.delayedCall (CBRXML.the().xml.autoplayDelay, function (){getNewStory(1)});		}		private function buttonClick (e:Event):void {			if ((changing) || (e.currentTarget is CloseButton)) return;			var button:MovieClip = (e.currentTarget == _activeStory) ? Controls.PlayBtn : e.currentTarget;			this ['click' + button.name] ();			Util.toggle (button);			e.stopPropagation ();		}/*		private function cleanUp (e:Event):void {			stage.removeEventListener (MouseEvent.MOUSE_DOWN, mouseDownOnStage);			stage.removeEventListener (MouseEvent.MOUSE_UP, mouseUpOnStage);		}*///		PLAY CONTROL FUNCTIONS		private function clickPlayBtn (e:Event = null):void {			if (_activeStory) this [[null, 'startPlay', 'stopPlay'][Controls.PlayBtn.currentFrame]]();		}		private function startPlay (e:Event = null):void {			_activeStory.dispatchEvent(new Event('startPlay', true, true));		}		private function stopPlay (e:Event = null):void {			_activeStory.dispatchEvent(new Event('stopPlay', true, true));		}		private function onPlayThumbDown (e:MouseEvent):void {			playThumbUp = false;			stage.addEventListener (MouseEvent.MOUSE_UP, clickPlayThumb, false, 0, true);		}		private function clickPlayThumb (e:MouseEvent = null):void {			stage.removeEventListener (MouseEvent.MOUSE_UP, clickPlayThumb);			playThumbUp = true;		}		private function playThumbSlide (e:Event):void {			updateStory (e.target.percent);		}		private function clickPlayBar (e:MouseEvent = null):void {			Controls.PlayThumb.x = Controls.PlayBar.x + Controls.PlayBar.mouseX;			updateStory (Controls.PlayBar.mouseX / Controls.PlayBar.width);		}		private function updateStory (whichFrame:Number):void {			if (!_activeStory) return;			_activeStory.gotoFrame (whichFrame);			_activeStory.dispatchEvent(new Event ('updateStory', true, true));		}//		MISC STORY CONTROL FUNCTIONS		private function clickAudioBtn (e:MouseEvent = null):void {			CBRXML.the().playerVolume = 0;			_activeStory.soundTransform = new SoundTransform (CBRXML.the().playerVolume);		}		private function clickTextSizeBtn (e:MouseEvent = null):void {			CBRXML.the().cycleTextSize();			activeStory.dispatchEvent (new Event ('updateStyles', true, true));			activeStory.setTextVisibility (CBRXML.the().showStoryText);			Controls.TextShowBtn.gotoAndStop (1);		}		private function clickTextShowBtn (e:MouseEvent = null):void {			CBRXML.the().showStoryText = !CBRXML.the().showStoryText;			_activeStory.setTextVisibility (Boolean (CBRXML.the().showStoryText));		}		public function setMarkerPosition (position:Number):void {			if (playThumbUp) Controls.PlayThumb.x = Controls.PlayBar.x + position * Controls.PlayBar.width;		}		private function clickAutoplayBtn (e:Event = null):void {			CBRXML.the().autoPlay = !CBRXML.the().autoPlay;		}//		BACK/NEXT FUNCTIONS		private function clickLastStory (e:Event = null):void { getNewStory (-1); }		private function clickNextStory (e:Event = null):void { getNewStory (1); }/*		private function mouseDownOnStage (e:MouseEvent = null):void { mouseDownOnStageLoc = stage.mouseX; }		private function mouseUpOnStage (e:MouseEvent = null):void {			if (Math.abs (stage.mouseX - mouseDownOnStageLoc) > 240) getNewStory ((stage.mouseX > mouseDownOnStageLoc) ? -1:1);		}*/		private function clickRelContent (e:MouseEvent = null):void {			stopPlay ();			addChild (new RelatedMenu (_entryXML));		}		public function clickBackBtn (e:MouseEvent = null):void {			Main.instance.dispatchEvent (new Event ('removeEntry', true, true));		}		public static function get instance():StoryManager { return _instance; }		public function get activeStory():Story { return _activeStory; }	}}