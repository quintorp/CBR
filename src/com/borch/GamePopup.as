package com.borch {	import com.borch.CBRXML;	import com.greensock.TweenMax;	import com.greensock.easing.Back;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.text.AntiAliasType;	import flash.text.TextField;	import flash.text.TextFormat;	public class GamePopup extends MovieClip {		private static var _instance:GamePopup;		private var title:String;		private var body:Object;		private var options:Array = [];		private var help:String;		private var timedClose:Number;		private var addCloseButton:Boolean;		private var BodyClip:MovieClip;		private var HelpClip:MovieClip;		private var OuterContainer:MovieClip;		private var TheBack:RoundBack;		private var backScaleY:Array = [1];		public function GamePopup (_input:Object, _timedClose:Number = 0, _addCloseButton:Boolean = false):void {			_instance = this;			super ();			visible = false;			if ((_input is XML) || (_input is XMLList)) {				if (_input.hasOwnProperty ('title')) title = _input.title.toString ();				if (_input.hasOwnProperty ('body'))  body = _input.body.toString ();				if (_input.hasOwnProperty ('help'))  help = _input.help.toString ();				if (_input.hasOwnProperty ('options')) options = _input.options.split ('|');			} else if ((_input is String) || (_input is DisplayObject)) {				body = _input;			} else {				body = 'Unhandled GamePopup _input: ' + _input;			}			timedClose = _timedClose;			addCloseButton = _addCloseButton;			(stage) ? init ():addEventListener (Event.ADDED_TO_STAGE, init, false, 0, true);		}		private function init (e:Event = null):void {			removeEventListener (Event.ADDED_TO_STAGE, init);			addEventListener ('buttonClick', buttonClick, false, 0, true);			var fontTitle:String = 'Myriad Pro Bold';			var fontBody:String = 'Myriad Pro Regular';			addChild (new Backdrop ());//			ADD CONTAINER			OuterContainer = new MovieClip ();			addChild (OuterContainer);			var InnerContainer:MovieClip = new MovieClip ();			OuterContainer.addChild (InnerContainer);//			ADD body CONTENT HOLDER//			WE ADD body CLIP FIRST SO WE HAVE WIDTH FOR OTHER ELEMENTS			BodyClip = new MovieClip;			InnerContainer.addChild (BodyClip);			if (body is String) {				var BodyText:TextField = new TextField ();				BodyText.multiline = BodyText.wordWrap = true;				BodyText.selectable = false;				BodyText.antiAliasType = AntiAliasType.ADVANCED;				BodyText.sharpness = 100;				BodyText.thickness = 100;				BodyText.defaultTextFormat = new TextFormat (fontBody, 16, 0xFFFFFF, null, null, null, null, null, null, null, null, null, 3);				BodyText.defaultTextFormat.leading = 3;				BodyText.width = 480;				BodyText.htmlText = String (body);				BodyText.width = Util.inRange (Math.sqrt ((BodyText.textHeight * BodyText.width) * 2), 360, stage.stageWidth - 100);				BodyText.height = BodyText.textHeight + 5;//				BodyClip.addChild (BodyText);				var bitmapData:BitmapData = new BitmapData (BodyText.width, BodyText.height, true, 0x00000000);				bitmapData.draw(BodyText);				var bitmap:Bitmap = new Bitmap();				bitmap.bitmapData = bitmapData;				bitmap.smoothing = true;				BodyClip.addChild(bitmap);			} else if (body is DisplayObject) {				BodyClip.addChild (MovieClip (body));			}//			ADD TITLE TO CONTAINER			if (title) {				var Title:TextField = new TextField;				InnerContainer.addChild (Title);				Title.multiline = Title.wordWrap = true;				Title.selectable = false;				Title.defaultTextFormat = new TextFormat (fontTitle, 16, 0xFDFB47, false, false, false, null, null, 'center');				Title.htmlText = title;				Title.width = BodyClip.width;				Title.height = Title.textHeight + 5;				Title.y = 10;			}			BodyClip.y = (Title) ? Title.y + Title.height:7;			// ADD OPTION BUTTONS			for (var i:int in options) {				var buttonNumber:int = (options.length == 1) ? NaN:i;				var ChoiceButton:MovieClip = new OptionButton (options [i], false, buttonNumber);				BodyClip.addChild (ChoiceButton);				ChoiceButton.y = BodyClip.height + 10;			}			TheBack = InnerContainer.addChild (new RoundBack ());			// ADD HELP BUTTON TO WELCOME CLIP			if (help) {				// ADD BACK TO CONTAINER				var HelpButton:OptionButton = new OptionButton (CBRXML.the().xml.buttonLabels.Help, true);				BodyClip.addChild (HelpButton);				HelpButton.y = BodyClip.height - HelpButton.height;				HelpButton.x = BodyClip.width - HelpButton.width;				// ADD HELP CLIP TO CONTAINER				HelpClip = new MovieClip;				InnerContainer.addChild (HelpClip);				HelpClip.y = BodyClip.y;				HelpClip.visible = false;				// ADD HELP TO HELP CLIP				var HelpText:TextField = new TextField;				HelpClip.addChild (HelpText);				HelpText.multiline = HelpText.wordWrap = true;				//HelpText.antiAliasType = AntiAliasType.ADVANCED;				HelpText.selectable = HelpText.mouseEnabled = false;				HelpText.defaultTextFormat = new TextFormat (fontBody, 16, 0xFFFFFF, null, null, null, null, null, null, null, null, null, 3);				HelpText.width = BodyText.width;				HelpText.htmlText = help;				HelpClip.height = HelpText.height = HelpText.textHeight + 5;				// ADD WELCOME BUTTON TO HELP CLIP				var MainButton:MovieClip = new OptionButton (CBRXML.the().xml.buttonLabels.About, true);				HelpClip.addChild (MainButton);				MainButton.y = HelpClip.height + 7;				MainButton.x = BodyClip.width - MainButton.width;			}			// ADD CLOSE BUTTON TO CONTAINER			if (addCloseButton) var CloseBtn:CloseButton = InnerContainer.addChild (new CloseButton ());			/***** ADD BADGE ROUTINE FOR FUTURE USE *****			 if (params.badge) {			 var TheBadge:MovieClip = BodyText.addChild (new params.badge);			 TheBadge.width = 60;			 TheBadge.scaleY = TheBadge.scaleX;			 AlignUtil.alignTopLeft (TheBadge, TheBack.getRect (TheBack));			 TheBadge.x -= TheBadge.width/2;			 TheBadge.y -= TheBadge.height/2;			 }			 **************************************/			if (HelpClip) {				var overhead:Number = .5 * (InnerContainer.height - BodyClip.height);				backScaleY.push ( (HelpClip.height + overhead) / (BodyClip.height + overhead));			}			InnerContainer.x -= InnerContainer.width / 2;			InnerContainer.y -= InnerContainer.height / 2;			OuterContainer.scaleY = OuterContainer.scaleX = .2;			Center.it (OuterContainer, stage);			visible = true;			var finalScale:Number = Math.min (1, Math.max (stage.stageHeight / OuterContainer.height, stage.stageWidth / OuterContainer.width));			TweenMax.to (OuterContainer, 2, { scaleX:finalScale, scaleY:finalScale, ease:Back.easeOut, onComplete:enableClose });		}		private function enableClose ():void {			if (options) return;			if (timedClose) TweenMax.delayedCall (timedClose, close);			stage.addEventListener (KeyboardEvent.KEY_UP, checkKey, false, 0, true);			stage.focus = stage;		}		private function checkKey (k:KeyboardEvent):void {			if (k.keyCode == 13) close ();		}		private function close ():void {			TweenMax.killDelayedCallsTo (close);			removeEventListener ('buttonClick', buttonClick);			if (parent == GameManager.instance) GameManager.instance.dispatchEvent (new Event ('restartTimer', true, true));			stage.removeEventListener (KeyboardEvent.KEY_UP, checkKey);			TweenMax.to (OuterContainer, .6, { alpha:0, scaleX:.1, scaleY:.1, onComplete:Destroy.it, onCompleteParams:[this] });		}		private function swapContent (swapDir:int):void {			var swapArray:Array = [				[HelpClip, BodyClip],				[BodyClip, HelpClip]			][swapDir];			TweenMax.to (swapArray[0], .3, {autoAlpha:0, onComplete:resizeTheBack });			function resizeTheBack ():void {				TweenMax.to (TheBack, .3, { scaleY:backScaleY[swapDir], onComplete:showOther });			}			function showOther ():void {				TweenMax.to (swapArray[1], .3, {autoAlpha:1 });			}		}		private function buttonClick (e:Event):void {			if (e.target is CloseButton) {				close ();				e.stopPropagation ();				return;			}			switch (e.target.name) {				case CBRXML.the().xml.buttonLabels.Help.toString() :					swapContent (1);					e.stopPropagation ();					break;				case CBRXML.the().xml.buttonLabels.About.toString() :					swapContent (0);					e.stopPropagation ();					break;				case CBRXML.the().xml.feedbackAgain:					GameManager.instance.dispatchEvent (new Event ('resetGame', true, true));					break;				default:					trace ('GamePopup has no handler for button: ' + e.target.name);					close ();			}		}		public static function get instance():GamePopup { return _instance; }	}}