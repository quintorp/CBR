package com.borch {	import flash.display.CapsStyle;	import flash.display.GradientType;	import flash.display.LineScaleMode;	import flash.display.MovieClip;	import flash.display.Shape;	import flash.geom.Matrix;	import flash.text.TextField;	import flash.text.TextFormat;	public class GameButton extends MovieClip {		private var NameField : TextField;		private var symbolColor : int;		private var _name : String;		public function GameButton (pname : String, pClickFunction : Function = null, _symbolColor : int = 0xFFFFFF) {			_name = pname;			symbolColor = _symbolColor;			// CREATE BUTTON IMAGE			var ButtonShape : Shape = new Shape;			var fontTitle:String = 'Myriad Pro Bold';			addChild (ButtonShape);			ButtonShape.graphics.lineStyle (1, 0xA09265);			ButtonShape.graphics.drawCircle (0, 0, 24);			var matrix : Matrix = new Matrix ();			matrix.createGradientBox (48, 48, Math.PI / 2, -24, -24);			ButtonShape.graphics.lineStyle (5);			ButtonShape.graphics.lineGradientStyle (GradientType.LINEAR, [0xFFFBE5, 0xE6E2C5, 0x4C5200], [1, 1, 1], [32, 128, 200], matrix);			ButtonShape.graphics.drawCircle (0, 0, 21);			ButtonShape.graphics.lineStyle (2, 0xFFFFFF);			ButtonShape.graphics.drawCircle (0, 0, 19);			ButtonShape.graphics.lineStyle (1, 0xA09265);			ButtonShape.graphics.beginGradientFill (GradientType.RADIAL, [0x289FBD, 0x413375], [1, 1], [100, 200], matrix);			ButtonShape.graphics.drawCircle (0, 0, 18);			ButtonShape.graphics.endFill ();			switch (name.toUpperCase ()) {				case 'HOUSE' :				case 'HOME' :				case 'MAIN' :				case 'MENU' :					ButtonShape.graphics.lineStyle ();					ButtonShape.graphics.beginFill (symbolColor);					ButtonShape.graphics.lineTo (-12.8, -1.2);					ButtonShape.graphics.lineTo (0, -11.2);					ButtonShape.graphics.lineTo (12.8, -1.2);					ButtonShape.graphics.lineTo (9.7, -1.2);					ButtonShape.graphics.lineTo (9.7, 9.5);					ButtonShape.graphics.lineTo (-9.7, 9.5);					ButtonShape.graphics.lineTo (-9.7, -1.2);					ButtonShape.graphics.lineTo (-12.8, -1.2);					ButtonShape.graphics.endFill ();					break;				case 'BAKE':				case 'SOLVE':				case 'SEARCH':				case 'SEEK':				case 'FIND':					ButtonShape.graphics.lineStyle (3.5, symbolColor, 1, false, LineScaleMode.NORMAL, CapsStyle.ROUND);					ButtonShape.graphics.drawCircle (-2, -2, 7);					ButtonShape.graphics.moveTo (6, 6);					ButtonShape.graphics.lineTo (10, 10);					break;				case 'ASK':				case 'HELP':					ButtonShape.graphics.lineStyle (4.5, symbolColor, 1, false, LineScaleMode.NORMAL, CapsStyle.NONE);					ButtonShape.graphics.moveTo (-8, -2);					ButtonShape.graphics.curveTo (-8, -10, 0, -10);					ButtonShape.graphics.curveTo (7, -10, 7, -2);					ButtonShape.graphics.curveTo (6, -1, 5, 0);					ButtonShape.graphics.curveTo (-1, 2, 0, 7);					ButtonShape.graphics.moveTo (0, 9);					ButtonShape.graphics.lineTo (0, 13);					break;				case 'GAME':				case 'PUZZLE':				case 'QUIZ':					ButtonShape.graphics.lineStyle ();					ButtonShape.graphics.beginFill (symbolColor);					ButtonShape.graphics.drawRect (-8, -8, 16, 16);					ButtonShape.graphics.drawCircle (-11, 0, 2.5);					ButtonShape.graphics.drawCircle (0, -11, 2.5);					ButtonShape.graphics.drawCircle (6, -1, 2.5);					ButtonShape.graphics.drawCircle (-1, 6, 2.5);					break;				case 'RESET':				case 'RECYCLE':					var i : int = 3;					while (i--) this.addChild (makeRecycleArrow (i * 120));					break;				case 'NEXT':				case 'FORWARD':				case 'RIGHT':				case 'AHEAD':					addChild (makeDirectionArrow (true));					break;				case 'PREVIOUS':				case 'PREV':				case 'REVERSE':				case 'LEFT':				case 'BACK':					addChild (makeDirectionArrow ());					break;			}			// ADD NAME FIELD			NameField = new TextField;			addChild (NameField);			NameField.defaultTextFormat = new TextFormat (fontTitle, 12, 0, true);			NameField.y = 22;			NameField.mouseEnabled = NameField.selectable = false;			setName (_name.toUpperCase ());			buttonMode = useHandCursor = true;			Util.initBtn (this);		}		private function makeRecycleArrow (rotn : Number) : Shape {			var Arrow : Shape = new Shape;			Arrow.graphics.beginFill (symbolColor);			Arrow.graphics.moveTo (-8.6, -6);			Arrow.graphics.lineTo (-6.1, -9.8);			Arrow.graphics.curveTo (-5.3, -12, -3.4, -11.6);			Arrow.graphics.lineTo (3.6, -11.6);			Arrow.graphics.curveTo (5, -12, 6.4, -10);			Arrow.graphics.lineTo (7.4, -8.1);			Arrow.graphics.lineTo (9.4, -9.3);			Arrow.graphics.lineTo (6.4, -4.1);			Arrow.graphics.lineTo (.5, -4);			Arrow.graphics.lineTo (2.3, -5.1);			Arrow.graphics.lineTo (0, -8.7);			Arrow.graphics.lineTo (-3.6, -3);			Arrow.graphics.moveTo (-8.6, -6);			Arrow.graphics.endFill ();			Arrow.rotation = rotn;			return Arrow;		}		private function makeDirectionArrow (flip : Boolean = false) : Shape {			var Arrow : Shape = new Shape;			Arrow.graphics.beginFill (symbolColor);			Arrow.graphics.moveTo (-14, 0);			Arrow.graphics.lineTo (5, -15);			Arrow.graphics.lineTo (5, -6);			Arrow.graphics.lineTo (11, -8);			Arrow.graphics.lineTo (11, 8);			Arrow.graphics.lineTo (5, 6);			Arrow.graphics.lineTo (5, 15);			Arrow.graphics.lineTo (-14, 0);			Arrow.graphics.endFill ();			if (flip) Arrow.scaleX = -1;			return Arrow;		}		override public function get name () : String { return _name; }		override public function set name (value : String) : void { setName (value); }		public function setName (value : String) : void {			_name = value;			NameField.text = _name;			NameField.height = NameField.textHeight + 5;			NameField.width = NameField.textWidth + 5;			NameField.x = -NameField.width / 2;		}	}}