package com.borch {	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.geom.Point;	import flash.text.TextField;	import flash.text.TextFormat;	import flash.ui.Mouse;	import flash.utils.Timer;	import flash.utils.getDefinitionByName;	public class GameManager extends EntryManager {		private static var _instance:GameManager;		private var TheGame:MovieClip;		private var ResourceLoader:LoaderThing;		private var Popup:MovieClip;		private var gameTimer:Timer;		private const DOMAIN:String = 'com.borch.';		private var engines:Array = [ Class (ArkGame), Class (BakeGame), Class (BoatGame), Class (CoatGame), Class (ColorGame), Class (FinderGame), Class (FrogGame), Class (JigsawGame), Class (MatchGame), Class (MemoryGame), Class (NavGame), Class (NileGame), Class (NoahGame), Class (OrderGame), Class (PathGame), Class (QuizGame), Class (XwordGame) ];		/**** INIT GAME ****/		public function GameManager (entryXML:XML):void {			_instance = this;			super (entryXML);//			LOAD GAME RESOURCE IF REQUIRED			if (_entryXML.hasOwnProperty ('URL')) {				ResourceLoader = new LoaderThing (_entryXML.URL);				addEventListener ('LOADED', addGame, false, 0, true);				addChild (ResourceLoader);			} else {				addGame ();			}		}		private function addGame (e:Event = null):void {			removeEventListener ('LOADED', addGame);			TheGame = new (getDefinitionByName (DOMAIN + _entryXML.engine) as Class);			TheGame.addEventListener (Event.ADDED_TO_STAGE, init, false, 0, true);			addChildAt (TheGame, 0);		}		private function init (e:Event):void {			addEventListener ('pauseTimer', pauseTimer, false, 0, true);			addEventListener ('restartTimer', restartTimer, false, 0, true);			addEventListener ('buttonClick', buttonClick, false, 0, true);			addEventListener ('resumeGame', resumeGame, false, 0, true);			addEventListener ('resetGame', resetGame, false, 0, true);			addEventListener ('cleanup', cleanup, false, 0, true);			addChild (new Backdrop (this, 0xccccff, 1));			// ADD RESET, SOLVE, HELP BUTTONS AND TIMER FIELD			Util.initBtn (BackBtn);			Util.initBtn (RelatedBtn);			Util.initBtn (HelpBtn);			Util.initBtn (ResetBtn);			Util.initBtn (SolveBtn);			Util.initBtn (PrintBtn);			PrintBtn.visible = TheGame.hasOwnProperty ('Printable');			SolveBtn.visible = TheGame.hasOwnProperty ('solveGame');			SolveBtn.Solve.Label.text = (_entryXML.engine == 'BakeGame') ? CBRXML.the().xml.buttonLabels.Bake :  CBRXML.the().xml.buttonLabels.Solve;			GameClock.visible = _entryXML.engine != 'ColorGame';			gameTimer = new Timer (1000, 0);			gameTimer.addEventListener (TimerEvent.TIMER, updateGameTimer, false, 0, true);			if (_entryXML.engine == 'NavGame') {				TheGame.initGame (_entryXML);			} else if (ResourceLoader) {				TheGame.initGame (ResourceLoader.contents);			} else {				TheGame.initGame (_entryXML.source);			}			if (!_entryXML.hasOwnProperty ('options')) _entryXML.options = CBRXML.the().xml.gameButtons.play;			if (_entryXML.source == 'MatchGame') {				TheGame.addEventListener ('matchGameReady', matchGamePopup, false, 0, true);			} else {				Popup = new GamePopup (_entryXML, 0, false);//				trace (_entryXML);				addChild (Popup);			}//			_entryXML.options = CBRXML.the().xml.gameButtons.start;		}		private function resetGame (buttonOption:* = null):void {			gameTimer.reset ();			if (GameClock) GameClock.text = '0:00';			if (SolveBtn) SolveBtn.mouseEnabled = true;			if (ResetBtn) ResetBtn.mouseEnabled = false;			TheGame.resetGame (buttonOption);		}		private function matchGamePopup (e:Event = null):void {			removeEventListener ('matchGameReady', matchGamePopup);			Popup = new GamePopup (_entryXML, 0, false);			addChild (Popup);		}		public function buttonClick (clickEvent:Event):void {			var buttonName:String = clickEvent.target.name.toUpperCase ();			switch (buttonName) {				case 'PRINTBTN' :					if (!TheGame.hasOwnProperty ('Printable')) return;					var GamePrinter:Printer = new Printer (TheGame.Printable, new Main.instance.PrintLogo, 3);					addChild (GamePrinter);					break;				case 'SOLVEBTN' :					if (ResetBtn) ResetBtn.mouseEnabled = true;					SolveBtn.mouseEnabled = (_entryXML.engine == 'BakeGame') ? true : false;					gameTimer.reset ();					TheGame.solveGame ();					GameClock.text = '0:00';					break;				case 'HELPBTN' :					TheGame.stopGame ();					gameTimer.stop ();					var popupHelp:XML = <popupHelp></popupHelp>;					popupHelp.title = _entryXML.title.toString () + ' ' + CBRXML.the().xml.helpTitle;					popupHelp.body = _entryXML.help.toString ();					popupHelp.options = CBRXML.the().xml.buttonLabels.Done.toString();					Popup = new GamePopup (popupHelp, 0, false);					addChild (Popup);					break;				case 'BACKBTN' :				case 'BACK' :					Main.instance.dispatchEvent (new Event ('removeEntry', true, true));					cleanup ();					break;				case 'RELATEDBTN' :					TheGame.stopGame ();					gameTimer.stop ();					addChild (new RelatedMenu (_entryXML));					break;				case 'DONE' :				case 'CONTINUE' :					resumeGame ();					break;				default :					var buttonOption:Object;					if ((!clickEvent.target.hasOwnProperty ('number')) || (isNaN (clickEvent.target.number))) {						buttonOption = _entryXML.hasOwnProperty ('source') ? _entryXML.source:null;					} else {						buttonOption = clickEvent.target.number;						buttonName = 'OPTION';					}					switch (buttonName) {						case 'OPTION' :						case 'START' :						case 'RESETBTN' :							resetGame (buttonOption);							break;						default:							Util.badButtonMessage (this, clickEvent);							return;					}			}			clickEvent.stopPropagation ();		}		private function cleanup (e:Event = void):void {			TheGame.stopGame ();			TheGame.cleanUp ();			Destroy.it (this, .3);		}		private function makeLogoAndURL ():MovieClip {			var LogoAndURL:MovieClip = new MovieClip ();			LogoAndURL.addChild (new Main.instance.PrintLogo);			var URLField:TextField = new TextField ();			URLField.defaultTextFormat = new TextFormat ('Myriad Pro Bold', 12, 0);			URLField.text = CBRXML.the().xml.URLforLogo;			URLField.wordWrap = false;			URLField.embedFonts = true;			URLField.width = URLField.textWidth + 8;			URLField.height = URLField.textHeight + 3;			URLField.y = LogoAndURL.height;			LogoAndURL.addChild (URLField);			return LogoAndURL;		}		private function resumeGame (e:Event = null):void {			TheGame.startGame ();			gameStarted ();		}		public function gameStarted ():void {			if (ResetBtn) ResetBtn.mouseEnabled = true;			if (!gameTimer.running) gameTimer.start ();		}		private function updateGameTimer (event:TimerEvent):void {			GameClock.text = Util.formatTime (event.target.currentCount);		}		private function pauseTimer (e:Event = null):void {			gameTimer.stop ();		}		private function restartTimer (e:Event = null):void {			gameTimer.start ();//			TheGame.startGame ();		}		public function gameFeedback (success:Object = true):void {			Mouse.show ();			if (SolveBtn) SolveBtn.mouseEnabled = false;			if (ResetBtn) ResetBtn.mouseEnabled = true;			if (gameTimer) gameTimer.stop ();			var feedback:String = '';			if (success) { // GAME ENDED SUCCESSFULLY				feedback += CBRXML.the().xml.feedbackPos.choice [Util.randomize(CBRXML.the().xml.feedbackPos.choice.length())].toString() + ' ';				if (success is String) feedback += success;				trace (_entryXML.timeFeedback);				feedback += (_entryXML.timeFeedback.length()) ? _entryXML.timeFeedback + ' ' : CBRXML.the().xml.feedbackTime1 + ' ';				feedback += GameClock.text + ' ' + CBRXML.the().xml.feedbackTime2 + '\n\n';			} else { // SOLVE BUTTON CLICKED, END GAME WITHOUT CHEERING				if (_entryXML.sorry != undefined) feedback = CBRXML.the().xml.feedbackNeg.choice[Util.randomize(CBRXML.the().xml.feedbackNeg.choice.length())].toString() + ' ' + _entryXML.sorry + '\n\n';				if (GameClock) GameClock.text = '0:00';			}			feedback += _entryXML.exit;			_entryXML.feedback = feedback + _entryXML.exit;			var feedbackXML:XML = <feedbackXML></feedbackXML>;			feedbackXML.body = feedback;			feedbackXML.options = CBRXML.the().xml.feedbackAgain.toString() + '|' + CBRXML.the().xml.buttonLabels.Back;			addChild (new GamePopup (feedbackXML, 0, false));		}		public static function get instance():GameManager { return _instance; }	}}